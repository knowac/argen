#!/bin/bash

printHelp() {
  cat << EOF
Description: Script generates the code changes for the repositories in a given depth.
Reports will be stored in the ar_reports/ directory.
Usage: ./ar_generator [(-a|--author) AUTHOR] [(-s|--since) DATE] [(-d|--depth) DEPTH] [--help]
Options:
  -a, --author AUTHOR
    Sets author.
    By default global value for user.name from ~/.gitconfig will be used.
  -s, --since DATE
    Sets the date since when the report should be generated.
    By default the current month from the 1st day will be used.
  -d, --depth DEPTH
    Sets the maximal depth (max 9) for repositories scanning.
    By default it will be 1.
  --help
    Print this help
Example:
  ./ar_generator --author "USER1" --since "2018-01-01" -d 3
EOF
  exit $1
}

AUTHOR=""
SINCE=""
MAX_DEPTH=1
CURR_DIR="$PWD"
AR_REPORTS="ar_reports"
AR_REPORTS_DIR="$CURR_DIR"/"$AR_REPORTS"

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
  -a|--author)
    shift # past argument
    if [ ! -z "$1" ] ; then
        AUTHOR="$1"
    else
        echo "No user entered"
        printHelp 1
    fi
    shift # past value
    ;;
  -s|--since)
    shift # past argument
    if [ ! -z "$1" ] ; then
        [[ $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && date -d "$1" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            SINCE="$1"
        else
            echo "Improper date format"
            printHelp 1
        fi
    else
        echo "No date entered"
        printHelp 1
    fi
    shift # past value
    ;;
  -d|--depth)
    shift # past argument
    if [ ! -z "$1" ] ; then
        [[ $1 =~ ^[0-9]{1}$ ]] && MAX_DEPTH=$1
    else
        echo "No depth entered"
        printHelp 1
    fi
    shift # past value
    ;;
  --help)
    printHelp 0
    ;;
  *)    # unknown option
    printHelp 1
    ;;
esac
done

[[ -z "$SINCE" ]] && SINCE="$(date +%Y-%m-01)"
[[ -z "$AUTHOR" ]] && AUTHOR="$(git config --global user.name)"

echo "Generating reports for $AUTHOR since $SINCE ..."

DEPTH=0

iterate() {
    for f in *; do
        if [[ -d ${f} ]]; then
            use_git_log $f
        fi
    done
}

use_git_log() {
    NAME=""
    pushd $1 >/dev/null
    DEPTH=$DEPTH+1
    if [[ -d ".git" ]]; then
        if [[ "$1" = "." ]]; then
            NAME=$(basename "$PWD")
        else
            NAME=$1
        fi
        LOG="$(git log --ignore-space-change --patience -p --author "$AUTHOR" --since "$SINCE" --find-copies-harder)"

        if [[ ! -z $LOG ]]; then
            [[ ! -d "$AR_REPORTS_DIR"/"$SINCE" ]] && mkdir "$AR_REPORTS_DIR"/"$SINCE"
            echo "$LOG" > "$AR_REPORTS_DIR"/"$SINCE"/ar_"$NAME".txt
        fi
    fi
    [[ $DEPTH -le $MAX_DEPTH ]] && iterate $1
    popd >/dev/null
    DEPTH=$DEPTH-1
}

generate_ar() {
    [[ ! -d "$AR_REPORTS" ]] && mkdir $AR_REPORTS
    use_git_log .
    echo "Reports should be now ready under $AR_REPORTS directory"
}

generate_ar
